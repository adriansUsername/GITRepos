@model Portfolio.Models.UserViewModel
@using Portfolio.Models
@{
    ViewBag.Title = "UserProfile";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@if (Session["UserName"].ToString().Equals(Model.singleUser.userName))
{
    <h3>@Html.DisplayFor(m => m.singleUser.userName) @Html.ActionLink("Edit Profile", "UpdateProfile", Model.singleUser, new { @class = "btn btn-outline-warning" })</h3>
}
else
{
    <h3>@Html.DisplayFor(m => m.singleUser.userName)</h3>
}

<br />
<h2>Stories Edited: @Html.DisplayFor(m => m.singleUser.userEdited)</h2>
<br />
<h2>Stories Created:</h2>
@if (Model.storyViewModel.storyList.Count == 0)
{
    <h3>This user has no stories!</h3>
}
else
{
    //loop through all of user's stories
    foreach (StoryModel story in Model.storyViewModel.storyList)
    {
        //check if a story is public OR if this is the current user's profile

        if (story.storyPublic || Model.singleUser.userName.Equals((string)Session["UserName"]))
        {
            string storyRestrictionName = "";
            string storyGenreName = "";

            //get the restriction for this story
            foreach (RestrictionModel r in Model.storyViewModel.restrictionViewModel.restrictionList)
            {
                if (r.restrictionID == story.storyRestrictionID)
                {
                    storyRestrictionName = r.restrictionName;
                }
            }

            //get the genre for this story
            foreach (GenreModel g in Model.storyViewModel.genreViewModel.genreList)
            {
                if (g.genreID == story.storyGenreID)
                {
                    storyGenreName = g.genreName;
                }
            }

            //get the correct rating
            string rating = story.storyRating > 0 ? story.storyRating + " Star Rating" : "No Rating Yet";

            //only the user of the profile page or an admin will be able to delete AND edit
            int userRole = (int)Session["UserRoleID"];
            if (Model.singleUser.userName.Equals((string)Session["UserName"]) || (userRole == 3))
            {
                <h3>@story.storyTitle - @storyGenreName - @storyRestrictionName - @rating   @Html.ActionLink("Delete", "DeleteStory", "Story", story, new { @class = "btn btn-outline-danger float-right" })   @Html.ActionLink("Edit", "EditStoryProperties", "Story", story, new { @class = "btn btn-outline-warning float-right" })    @Html.ActionLink("Read", "ReadStory", "Story", story, new { @class = "btn btn-outline-info float-right" })</h3>
            }

            //mods can see the edit button but not the delete button
            else if (userRole == 2)
            {
                <h3>@story.storyTitle - @storyGenreName - @storyRestrictionName - @rating   @Html.ActionLink("Edit", "EditStoryProperties", "Story", story, new { @class = "btn btn-outline-warning float-right" })    @Html.ActionLink("Read", "ReadStory", "Story", story, new { @class = "btn btn-outline-info float-right" })</h3>
            }

            //option for regular users viewing this person's profile page
            else
            {
                <h3>
                    @story.storyTitle - @storyGenreName - @storyRestrictionName - @rating    @Html.ActionLink("Read", "ReadStory", "Story", story, new { @class = "btn btn-outline-info float-right" })
                </h3>
            }
        }
        else
        {
            <h3>This user has no public stories!</h3>
        }


    }
}
